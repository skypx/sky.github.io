I"*<ul id="markdown-toc">
  <li><a href="#问题" id="markdown-toc-问题">问题</a></li>
  <li><a href="#思考" id="markdown-toc-思考">思考</a></li>
  <li><a href="#找代码" id="markdown-toc-找代码">找代码</a></li>
</ul>

<h5 id="问题">问题</h5>

<blockquote>
  <p>我们都知道在mk文件里面做copy操作可以通过 <strong>PRODUCT_COPY_FILES</strong> 这个变量来做copy操作<br />
由于项目需要我需要对同一个文件，名字相同，内容不同的文件进行copy,类似这样</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="o">.</span><span class="na">mk</span> <span class="o">-&gt;</span> <span class="n">copy</span> <span class="n">a</span><span class="o">.</span><span class="na">txt</span>  
<span class="n">b</span><span class="o">.</span><span class="na">mk</span> <span class="o">-&gt;</span> <span class="n">copy</span> <span class="n">a</span><span class="o">.</span><span class="na">txt</span>  

<span class="n">c</span><span class="o">.</span><span class="na">mk</span>  
   <span class="o">--</span> <span class="n">include</span> <span class="n">a</span><span class="o">.</span><span class="na">mk</span>  
   <span class="o">--</span> <span class="n">include</span> <span class="n">b</span><span class="o">.</span><span class="na">mk</span>  
</code></pre></div></div>

<p>我想当然的以为肯定在b.mk里面文件会覆盖掉a.mk文件里面的东西, 因为mk文件执行是树形结构从上到下<br />
执行，本以为b.mk文件里面的会覆盖掉a.mk, 编译，刷机, 验证结果，目瞪狗呆!为什么是a.mk文件里面<br />
的文件会覆盖掉b.mk文件</p>

<h5 id="思考">思考</h5>
<ol>
  <li>脑子抽疯, 莫非mk从下向上编译，验证结果，在mk里面加log，明显是从上到下的执行.</li>
  <li>莫非针对这个copy有去重的定义？这个想法靠谱，我们平时写代码的时候自己也会有去除重复的习惯.</li>
</ol>

<h5 id="找代码">找代码</h5>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">这个目录下</span> <span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">core</span><span class="o">/</span><span class="nc">Makefile</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="n">filter</span> <span class="n">out</span> <span class="n">the</span> <span class="n">duplicate</span> <span class="o">&lt;</span><span class="n">source</span> <span class="n">file</span><span class="o">&gt;:&lt;</span><span class="n">dest</span> <span class="n">file</span><span class="o">&gt;</span> <span class="n">pairs</span><span class="o">.</span>
<span class="n">unique_product_copy_files_pairs</span> <span class="o">:=</span>
<span class="err">$</span><span class="o">(</span><span class="n">foreach</span> <span class="n">cf</span><span class="o">,</span><span class="err">$</span><span class="o">(</span><span class="no">PRODUCT_COPY_FILES</span><span class="o">),</span> <span class="err">\</span>
    <span class="err">$</span><span class="o">(</span><span class="k">if</span> <span class="err">$</span><span class="o">(</span><span class="n">filter</span> <span class="err">$</span><span class="o">(</span><span class="n">unique_product_copy_files_pairs</span><span class="o">),</span><span class="err">$</span><span class="o">(</span><span class="n">cf</span><span class="o">)),,</span><span class="err">\</span>
        <span class="err">$</span><span class="o">(</span><span class="n">eval</span> <span class="n">unique_product_copy_files_pairs</span> <span class="o">+=</span> <span class="err">$</span><span class="o">(</span><span class="n">cf</span><span class="o">))))</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unique_product_copy_files_destinations</span> <span class="o">:=</span>
<span class="err">$</span><span class="o">(</span><span class="n">foreach</span> <span class="n">cf</span><span class="o">,</span><span class="err">$</span><span class="o">(</span><span class="n">unique_product_copy_files_pairs</span><span class="o">),</span> <span class="err">\</span>
    <span class="err">$</span><span class="o">(</span><span class="n">eval</span> <span class="n">_src</span> <span class="o">:=</span> <span class="err">$</span><span class="o">(</span><span class="n">call</span> <span class="n">word</span><span class="o">-</span><span class="n">colon</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="err">$</span><span class="o">(</span><span class="n">cf</span><span class="o">)))</span> <span class="err">\</span>
    <span class="err">$</span><span class="o">(</span><span class="n">eval</span> <span class="n">_dest</span> <span class="o">:=</span> <span class="err">$</span><span class="o">(</span><span class="n">call</span> <span class="n">word</span><span class="o">-</span><span class="n">colon</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="err">$</span><span class="o">(</span><span class="n">cf</span><span class="o">)))</span> <span class="err">\</span>
    <span class="err">$</span><span class="o">(</span><span class="n">call</span> <span class="n">check</span><span class="o">-</span><span class="n">product</span><span class="o">-</span><span class="n">copy</span><span class="o">-</span><span class="n">files</span><span class="o">,</span><span class="err">$</span><span class="o">(</span><span class="n">cf</span><span class="o">))</span> <span class="err">\</span>
    <span class="err">$</span><span class="o">(</span><span class="k">if</span> <span class="err">$</span><span class="o">(</span><span class="n">filter</span> <span class="err">$</span><span class="o">(</span><span class="n">unique_product_copy_files_destinations</span><span class="o">),</span><span class="err">$</span><span class="o">(</span><span class="n">_dest</span><span class="o">)),</span> <span class="err">\</span>
        <span class="err">$</span><span class="o">(</span><span class="n">info</span> <span class="no">PRODUCT_COPY_FILES</span> <span class="err">$</span><span class="o">(</span><span class="n">cf</span><span class="o">)</span> <span class="n">ignored</span><span class="o">.),</span> <span class="err">\</span>
        <span class="err">$</span><span class="o">(</span><span class="n">eval</span> <span class="n">_fulldest</span> <span class="o">:=</span> <span class="err">$</span><span class="o">(</span><span class="n">call</span> <span class="n">append</span><span class="o">-</span><span class="n">path</span><span class="o">,</span><span class="err">$</span><span class="o">(</span><span class="no">PRODUCT_OUT</span><span class="o">),</span><span class="err">$</span><span class="o">(</span><span class="n">_dest</span><span class="o">)))</span> <span class="err">\</span>
        <span class="err">$</span><span class="o">(</span><span class="k">if</span> <span class="err">$</span><span class="o">(</span><span class="n">filter</span> <span class="o">%.</span><span class="na">xml</span><span class="o">,</span><span class="err">$</span><span class="o">(</span><span class="n">_dest</span><span class="o">)),</span><span class="err">\</span>
            <span class="err">$</span><span class="o">(</span><span class="n">eval</span> <span class="err">$</span><span class="o">(</span><span class="n">call</span> <span class="n">copy</span><span class="o">-</span><span class="n">xml</span><span class="o">-</span><span class="n">file</span><span class="o">-</span><span class="n">checked</span><span class="o">,</span><span class="err">$</span><span class="o">(</span><span class="n">_src</span><span class="o">),</span><span class="err">$</span><span class="o">(</span><span class="n">_fulldest</span><span class="o">))),</span><span class="err">\</span>
            <span class="err">$</span><span class="o">(</span><span class="n">eval</span> <span class="err">$</span><span class="o">(</span><span class="n">call</span> <span class="n">copy</span><span class="o">-</span><span class="n">one</span><span class="o">-</span><span class="n">file</span><span class="o">,</span><span class="err">$</span><span class="o">(</span><span class="n">_src</span><span class="o">),</span><span class="err">$</span><span class="o">(</span><span class="n">_fulldest</span><span class="o">))))</span> <span class="err">\</span>
        <span class="err">$</span><span class="o">(</span><span class="n">eval</span> <span class="no">ALL_DEFAULT_INSTALLED_MODULES</span> <span class="o">+=</span> <span class="err">$</span><span class="o">(</span><span class="n">_fulldest</span><span class="o">))</span> <span class="err">\</span>
        <span class="err">$</span><span class="o">(</span><span class="n">eval</span> <span class="n">unique_product_copy_files_destinations</span> <span class="o">+=</span> <span class="err">$</span><span class="o">(</span><span class="n">_dest</span><span class="o">))))</span>
</code></pre></div></div>

<p>从去除重复的算法来看，是从第一个字符串开始，如果目标中没有就添加，如果已经有就不做任何处理，因此只有最先描述的目标有效</p>

<p>至此明白了为什么，只有第一个copy的有效. 因为如果检测到已经有了这个文件的话，就不会对第二个文件做处理了.</p>

<p>PS: 如何在mk里面加入log,</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">输出信息的方式为</span><span class="o">::</span>
<span class="err">$</span><span class="o">(</span><span class="n">warning</span> <span class="n">xxxxx</span><span class="o">)</span> <span class="err">或者</span> <span class="err">$</span><span class="o">(</span><span class="n">error</span> <span class="n">xxxxx</span><span class="o">)</span>

<span class="err">输出变量的方式为</span><span class="o">::</span>
<span class="err">$</span><span class="o">(</span><span class="n">warning</span>  <span class="err">$</span><span class="o">(</span><span class="no">XXX</span><span class="o">))</span>

<span class="err">如果是输出</span><span class="n">error</span><span class="err">的话</span><span class="o">::</span>
<span class="err">如果是$</span><span class="o">(</span><span class="n">error</span> <span class="n">xxxxx</span><span class="o">)</span><span class="err">将会停止编译</span>
</code></pre></div></div>
:ET